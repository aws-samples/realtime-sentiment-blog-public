AWSTemplateFormatVersion: 2010-09-09
Description: API Gateway integration with SQS

Outputs:
  ApiEndpoint:
    Description: Endpoint for this stage of the api
    Value: !Join
      - ''
      - - https://
        - !Ref 'APIGateway'
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
        - prod/enqueue
  ApiEndpointTickets:
    Description: Endpoint for CRM Tickets
    Value: !Join
      - ''
      - - https://
        - !Ref 'APIGateway'
        - .execute-api.
        - !Ref 'AWS::Region'
        - .amazonaws.com/
        - prod/targeted

Parameters:
  QueueName:
    Description: The Name of the SQS queue
    Type: String
  QueueArn:
    Description: The ARN of the SQS queue
    Type: String
  LambdaFetchFromDynamoDBArn:
    Description: Fetch targeted sentiment from DynamoDB
    Type: String

Resources:
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API Endpoint to receive JSON payloads and queue in SQS
      Name: "cf-realtime-sentiment-api"
      Tags:
        -
          Key: "Project"
          Value: "Realtime Sentiment Blog"

  APIGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sqs:SendMessage
                Effect: Allow
                Resource: !Ref QueueArn
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: apig-sqs-send-msg-policy
      RoleName: "apig-sqs-send-msg-role"

  EnqueueResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref 'APIGateway'
      ParentId: !GetAtt
        - APIGateway
        - RootResourceId
      PathPart: enqueue
    DependsOn:
      - APIGateway

  PostToSQSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: !Ref EnqueueResource
      RestApiId: !Ref APIGateway
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt APIGatewayRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestParameters:
          integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''
        RequestTemplates:
          application/json: Action=SendMessage&MessageBody=$input.body
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':sqs:path/'
            - !Ref 'AWS::AccountId'
            - '/'
            - !Ref QueueName
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: '200'
    DependsOn:
      - APIGateway   

  TargetedSentimentResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref 'APIGateway'
      ParentId: !GetAtt
        - APIGateway
        - RootResourceId
      PathPart: 'targeted'
    DependsOn:
      - APIGateway

  LambdaMethod:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        RestApiId: !Ref APIGateway
        ResourceId: !Ref TargetedSentimentResource
        HttpMethod: POST
        AuthorizationType: NONE
        MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: 'Empty'
        Integration:
          Type: AWS
          IntegrationResponses:
            - StatusCode: 200
          IntegrationHttpMethod: POST
          Uri: !Sub
            - >-
              arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFuncArn}/invocations
            - LambdaFuncArn: !Ref LambdaFetchFromDynamoDBArn
      DependsOn:
        - TargetedSentimentResource

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGateway
      StageName: prod
    DependsOn:
      - PostToSQSMethod
      - LambdaMethod

  APIGatewayLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaFetchFromDynamoDBArn
      Principal: apigateway.amazonaws.com
    DependsOn:
      - APIGatewayDeployment